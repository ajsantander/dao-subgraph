// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class ProxyDeposit extends EthereumEvent {
  get params(): ProxyDeposit__Params {
    return new ProxyDeposit__Params(this);
  }
}

export class ProxyDeposit__Params {
  _event: ProxyDeposit;

  constructor(event: ProxyDeposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AppProxyPinned extends SmartContract {
  static bind(address: Address): AppProxyPinned {
    return new AppProxyPinned("AppProxyPinned", address);
  }

  isDepositable(): boolean {
    let result = super.call("isDepositable", []);

    return result[0].toBoolean();
  }

  try_isDepositable(): CallResult<boolean> {
    let result = super.tryCall("isDepositable", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", []);

    return result[0].toBytes();
  }

  try_appId(): CallResult<Bytes> {
    let result = super.tryCall("appId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  kernel(): Address {
    let result = super.call("kernel", []);

    return result[0].toAddress();
  }

  try_kernel(): CallResult<Address> {
    let result = super.tryCall("kernel", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", []);

    return result[0].toAddress();
  }

  try_implementation(): CallResult<Address> {
    let result = super.tryCall("implementation", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  proxyType(): BigInt {
    let result = super.call("proxyType", []);

    return result[0].toBigInt();
  }

  try_proxyType(): CallResult<BigInt> {
    let result = super.tryCall("proxyType", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _kernel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _appId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _initializePayload(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
