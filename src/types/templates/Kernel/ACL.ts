// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class SetPermission extends EthereumEvent {
  get params(): SetPermission__Params {
    return new SetPermission__Params(this);
  }
}

export class SetPermission__Params {
  _event: SetPermission;

  constructor(event: SetPermission) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get app(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get allowed(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class SetPermissionParams extends EthereumEvent {
  get params(): SetPermissionParams__Params {
    return new SetPermissionParams__Params(this);
  }
}

export class SetPermissionParams__Params {
  _event: SetPermissionParams;

  constructor(event: SetPermissionParams) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get app(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get paramsHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ChangePermissionManager extends EthereumEvent {
  get params(): ChangePermissionManager__Params {
    return new ChangePermissionManager__Params(this);
  }
}

export class ChangePermissionManager__Params {
  _event: ChangePermissionManager;

  constructor(event: ChangePermissionManager) {
    this._event = event;
  }

  get app(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ScriptResult extends EthereumEvent {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends EthereumEvent {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ACL__getPermissionParamResult {
  value0: i32;
  value1: i32;
  value2: BigInt;

  constructor(value0: i32, value1: i32, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromI32(this.value0));
    map.set("value1", EthereumValue.fromI32(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ACL extends SmartContract {
  static bind(address: Address): ACL {
    return new ACL("ACL", address);
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): CallResult<boolean> {
    let result = super.tryCall("hasInitialized", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  NO_PERMISSION(): Bytes {
    let result = super.call("NO_PERMISSION", []);

    return result[0].toBytes();
  }

  try_NO_PERMISSION(): CallResult<Bytes> {
    let result = super.tryCall("NO_PERMISSION", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call("getEVMScriptExecutor", [
      EthereumValue.fromBytes(_script)
    ]);

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): CallResult<Address> {
    let result = super.tryCall("getEVMScriptExecutor", [
      EthereumValue.fromBytes(_script)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getRecoveryVault(): Address {
    let result = super.call("getRecoveryVault", []);

    return result[0].toAddress();
  }

  try_getRecoveryVault(): CallResult<Address> {
    let result = super.tryCall("getRecoveryVault", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  CREATE_PERMISSIONS_ROLE(): Bytes {
    let result = super.call("CREATE_PERMISSIONS_ROLE", []);

    return result[0].toBytes();
  }

  try_CREATE_PERMISSIONS_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("CREATE_PERMISSIONS_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): CallResult<boolean> {
    let result = super.tryCall("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", []);

    return result[0].toBytes();
  }

  try_appId(): CallResult<Bytes> {
    let result = super.tryCall("appId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getInitializationBlock(): BigInt {
    let result = super.call("getInitializationBlock", []);

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): CallResult<BigInt> {
    let result = super.tryCall("getInitializationBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call("canPerform", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigIntArray(_params)
    ]);

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): CallResult<boolean> {
    let result = super.tryCall("canPerform", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigIntArray(_params)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call("getEVMScriptRegistry", []);

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): CallResult<Address> {
    let result = super.tryCall("getEVMScriptRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  ANY_ENTITY(): Address {
    let result = super.call("ANY_ENTITY", []);

    return result[0].toAddress();
  }

  try_ANY_ENTITY(): CallResult<Address> {
    let result = super.tryCall("ANY_ENTITY", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  EMPTY_PARAM_HASH(): Bytes {
    let result = super.call("EMPTY_PARAM_HASH", []);

    return result[0].toBytes();
  }

  try_EMPTY_PARAM_HASH(): CallResult<Bytes> {
    let result = super.tryCall("EMPTY_PARAM_HASH", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  kernel(): Address {
    let result = super.call("kernel", []);

    return result[0].toAddress();
  }

  try_kernel(): CallResult<Address> {
    let result = super.tryCall("kernel", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): CallResult<boolean> {
    let result = super.tryCall("isPetrified", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  BURN_ENTITY(): Address {
    let result = super.call("BURN_ENTITY", []);

    return result[0].toAddress();
  }

  try_BURN_ENTITY(): CallResult<Address> {
    let result = super.tryCall("BURN_ENTITY", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getPermissionParamsLength(
    _entity: Address,
    _app: Address,
    _role: Bytes
  ): BigInt {
    let result = super.call("getPermissionParamsLength", [
      EthereumValue.fromAddress(_entity),
      EthereumValue.fromAddress(_app),
      EthereumValue.fromFixedBytes(_role)
    ]);

    return result[0].toBigInt();
  }

  try_getPermissionParamsLength(
    _entity: Address,
    _app: Address,
    _role: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("getPermissionParamsLength", [
      EthereumValue.fromAddress(_entity),
      EthereumValue.fromAddress(_app),
      EthereumValue.fromFixedBytes(_role)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPermissionParam(
    _entity: Address,
    _app: Address,
    _role: Bytes,
    _index: BigInt
  ): ACL__getPermissionParamResult {
    let result = super.call("getPermissionParam", [
      EthereumValue.fromAddress(_entity),
      EthereumValue.fromAddress(_app),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigInt(_index)
    ]);

    return new ACL__getPermissionParamResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toBigInt()
    );
  }

  try_getPermissionParam(
    _entity: Address,
    _app: Address,
    _role: Bytes,
    _index: BigInt
  ): CallResult<ACL__getPermissionParamResult> {
    let result = super.tryCall("getPermissionParam", [
      EthereumValue.fromAddress(_entity),
      EthereumValue.fromAddress(_app),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ACL__getPermissionParamResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toBigInt()
      )
    );
  }

  getPermissionManager(_app: Address, _role: Bytes): Address {
    let result = super.call("getPermissionManager", [
      EthereumValue.fromAddress(_app),
      EthereumValue.fromFixedBytes(_role)
    ]);

    return result[0].toAddress();
  }

  try_getPermissionManager(_app: Address, _role: Bytes): CallResult<Address> {
    let result = super.tryCall("getPermissionManager", [
      EthereumValue.fromAddress(_app),
      EthereumValue.fromFixedBytes(_role)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  hasPermission(_who: Address, _where: Address, _what: Bytes): boolean {
    let result = super.call("hasPermission", [
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_where),
      EthereumValue.fromFixedBytes(_what)
    ]);

    return result[0].toBoolean();
  }

  try_hasPermission(
    _who: Address,
    _where: Address,
    _what: Bytes
  ): CallResult<boolean> {
    let result = super.tryCall("hasPermission", [
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_where),
      EthereumValue.fromFixedBytes(_what)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  hasPermission1(
    _who: Address,
    _where: Address,
    _what: Bytes,
    _how: Array<BigInt>
  ): boolean {
    let result = super.call("hasPermission", [
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_where),
      EthereumValue.fromFixedBytes(_what),
      EthereumValue.fromUnsignedBigIntArray(_how)
    ]);

    return result[0].toBoolean();
  }

  try_hasPermission1(
    _who: Address,
    _where: Address,
    _what: Bytes,
    _how: Array<BigInt>
  ): CallResult<boolean> {
    let result = super.tryCall("hasPermission", [
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_where),
      EthereumValue.fromFixedBytes(_what),
      EthereumValue.fromUnsignedBigIntArray(_how)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  hasPermission2(
    _who: Address,
    _where: Address,
    _what: Bytes,
    _how: Bytes
  ): boolean {
    let result = super.call("hasPermission", [
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_where),
      EthereumValue.fromFixedBytes(_what),
      EthereumValue.fromBytes(_how)
    ]);

    return result[0].toBoolean();
  }

  try_hasPermission2(
    _who: Address,
    _where: Address,
    _what: Bytes,
    _how: Bytes
  ): CallResult<boolean> {
    let result = super.tryCall("hasPermission", [
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_where),
      EthereumValue.fromFixedBytes(_what),
      EthereumValue.fromBytes(_how)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  evalParams(
    _paramsHash: Bytes,
    _who: Address,
    _where: Address,
    _what: Bytes,
    _how: Array<BigInt>
  ): boolean {
    let result = super.call("evalParams", [
      EthereumValue.fromFixedBytes(_paramsHash),
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_where),
      EthereumValue.fromFixedBytes(_what),
      EthereumValue.fromUnsignedBigIntArray(_how)
    ]);

    return result[0].toBoolean();
  }

  try_evalParams(
    _paramsHash: Bytes,
    _who: Address,
    _where: Address,
    _what: Bytes,
    _how: Array<BigInt>
  ): CallResult<boolean> {
    let result = super.tryCall("evalParams", [
      EthereumValue.fromFixedBytes(_paramsHash),
      EthereumValue.fromAddress(_who),
      EthereumValue.fromAddress(_where),
      EthereumValue.fromFixedBytes(_what),
      EthereumValue.fromUnsignedBigIntArray(_how)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class TransferToVaultCall extends EthereumCall {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _permissionsCreator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class CreatePermissionCall extends EthereumCall {
  get inputs(): CreatePermissionCall__Inputs {
    return new CreatePermissionCall__Inputs(this);
  }

  get outputs(): CreatePermissionCall__Outputs {
    return new CreatePermissionCall__Outputs(this);
  }
}

export class CreatePermissionCall__Inputs {
  _call: CreatePermissionCall;

  constructor(call: CreatePermissionCall) {
    this._call = call;
  }

  get _entity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _app(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _role(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _manager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreatePermissionCall__Outputs {
  _call: CreatePermissionCall;

  constructor(call: CreatePermissionCall) {
    this._call = call;
  }
}

export class GrantPermissionCall extends EthereumCall {
  get inputs(): GrantPermissionCall__Inputs {
    return new GrantPermissionCall__Inputs(this);
  }

  get outputs(): GrantPermissionCall__Outputs {
    return new GrantPermissionCall__Outputs(this);
  }
}

export class GrantPermissionCall__Inputs {
  _call: GrantPermissionCall;

  constructor(call: GrantPermissionCall) {
    this._call = call;
  }

  get _entity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _app(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _role(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class GrantPermissionCall__Outputs {
  _call: GrantPermissionCall;

  constructor(call: GrantPermissionCall) {
    this._call = call;
  }
}

export class GrantPermissionPCall extends EthereumCall {
  get inputs(): GrantPermissionPCall__Inputs {
    return new GrantPermissionPCall__Inputs(this);
  }

  get outputs(): GrantPermissionPCall__Outputs {
    return new GrantPermissionPCall__Outputs(this);
  }
}

export class GrantPermissionPCall__Inputs {
  _call: GrantPermissionPCall;

  constructor(call: GrantPermissionPCall) {
    this._call = call;
  }

  get _entity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _app(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _role(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _params(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class GrantPermissionPCall__Outputs {
  _call: GrantPermissionPCall;

  constructor(call: GrantPermissionPCall) {
    this._call = call;
  }
}

export class RevokePermissionCall extends EthereumCall {
  get inputs(): RevokePermissionCall__Inputs {
    return new RevokePermissionCall__Inputs(this);
  }

  get outputs(): RevokePermissionCall__Outputs {
    return new RevokePermissionCall__Outputs(this);
  }
}

export class RevokePermissionCall__Inputs {
  _call: RevokePermissionCall;

  constructor(call: RevokePermissionCall) {
    this._call = call;
  }

  get _entity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _app(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _role(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RevokePermissionCall__Outputs {
  _call: RevokePermissionCall;

  constructor(call: RevokePermissionCall) {
    this._call = call;
  }
}

export class SetPermissionManagerCall extends EthereumCall {
  get inputs(): SetPermissionManagerCall__Inputs {
    return new SetPermissionManagerCall__Inputs(this);
  }

  get outputs(): SetPermissionManagerCall__Outputs {
    return new SetPermissionManagerCall__Outputs(this);
  }
}

export class SetPermissionManagerCall__Inputs {
  _call: SetPermissionManagerCall;

  constructor(call: SetPermissionManagerCall) {
    this._call = call;
  }

  get _newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _app(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _role(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetPermissionManagerCall__Outputs {
  _call: SetPermissionManagerCall;

  constructor(call: SetPermissionManagerCall) {
    this._call = call;
  }
}

export class RemovePermissionManagerCall extends EthereumCall {
  get inputs(): RemovePermissionManagerCall__Inputs {
    return new RemovePermissionManagerCall__Inputs(this);
  }

  get outputs(): RemovePermissionManagerCall__Outputs {
    return new RemovePermissionManagerCall__Outputs(this);
  }
}

export class RemovePermissionManagerCall__Inputs {
  _call: RemovePermissionManagerCall;

  constructor(call: RemovePermissionManagerCall) {
    this._call = call;
  }

  get _app(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RemovePermissionManagerCall__Outputs {
  _call: RemovePermissionManagerCall;

  constructor(call: RemovePermissionManagerCall) {
    this._call = call;
  }
}

export class CreateBurnedPermissionCall extends EthereumCall {
  get inputs(): CreateBurnedPermissionCall__Inputs {
    return new CreateBurnedPermissionCall__Inputs(this);
  }

  get outputs(): CreateBurnedPermissionCall__Outputs {
    return new CreateBurnedPermissionCall__Outputs(this);
  }
}

export class CreateBurnedPermissionCall__Inputs {
  _call: CreateBurnedPermissionCall;

  constructor(call: CreateBurnedPermissionCall) {
    this._call = call;
  }

  get _app(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CreateBurnedPermissionCall__Outputs {
  _call: CreateBurnedPermissionCall;

  constructor(call: CreateBurnedPermissionCall) {
    this._call = call;
  }
}

export class BurnPermissionManagerCall extends EthereumCall {
  get inputs(): BurnPermissionManagerCall__Inputs {
    return new BurnPermissionManagerCall__Inputs(this);
  }

  get outputs(): BurnPermissionManagerCall__Outputs {
    return new BurnPermissionManagerCall__Outputs(this);
  }
}

export class BurnPermissionManagerCall__Inputs {
  _call: BurnPermissionManagerCall;

  constructor(call: BurnPermissionManagerCall) {
    this._call = call;
  }

  get _app(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BurnPermissionManagerCall__Outputs {
  _call: BurnPermissionManagerCall;

  constructor(call: BurnPermissionManagerCall) {
    this._call = call;
  }
}
