// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class NewRepo extends EthereumEvent {
  get params(): NewRepo__Params {
    return new NewRepo__Params(this);
  }
}

export class NewRepo__Params {
  _event: NewRepo;

  constructor(event: NewRepo) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get repo(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NewAppProxy extends EthereumEvent {
  get params(): NewAppProxy__Params {
    return new NewAppProxy__Params(this);
  }
}

export class NewAppProxy__Params {
  _event: NewAppProxy;

  constructor(event: NewAppProxy) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isUpgradeable(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get appId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ScriptResult extends EthereumEvent {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends EthereumEvent {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class APMRegistry extends SmartContract {
  static bind(address: Address): APMRegistry {
    return new APMRegistry("APMRegistry", address);
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): CallResult<boolean> {
    let result = super.tryCall("hasInitialized", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call("getEVMScriptExecutor", [
      EthereumValue.fromBytes(_script)
    ]);

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): CallResult<Address> {
    let result = super.tryCall("getEVMScriptExecutor", [
      EthereumValue.fromBytes(_script)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  registrar(): Address {
    let result = super.call("registrar", []);

    return result[0].toAddress();
  }

  try_registrar(): CallResult<Address> {
    let result = super.tryCall("registrar", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getRecoveryVault(): Address {
    let result = super.call("getRecoveryVault", []);

    return result[0].toAddress();
  }

  try_getRecoveryVault(): CallResult<Address> {
    let result = super.tryCall("getRecoveryVault", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  ens(): Address {
    let result = super.call("ens", []);

    return result[0].toAddress();
  }

  try_ens(): CallResult<Address> {
    let result = super.tryCall("ens", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  CREATE_REPO_ROLE(): Bytes {
    let result = super.call("CREATE_REPO_ROLE", []);

    return result[0].toBytes();
  }

  try_CREATE_REPO_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("CREATE_REPO_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): CallResult<boolean> {
    let result = super.tryCall("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", []);

    return result[0].toBytes();
  }

  try_appId(): CallResult<Bytes> {
    let result = super.tryCall("appId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getInitializationBlock(): BigInt {
    let result = super.call("getInitializationBlock", []);

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): CallResult<BigInt> {
    let result = super.tryCall("getInitializationBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call("canPerform", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigIntArray(_params)
    ]);

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): CallResult<boolean> {
    let result = super.tryCall("canPerform", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigIntArray(_params)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call("getEVMScriptRegistry", []);

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): CallResult<Address> {
    let result = super.tryCall("getEVMScriptRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  newAppProxyPinned(
    _kernel: Address,
    _appId: Bytes,
    _initializePayload: Bytes
  ): Address {
    let result = super.call("newAppProxyPinned", [
      EthereumValue.fromAddress(_kernel),
      EthereumValue.fromFixedBytes(_appId),
      EthereumValue.fromBytes(_initializePayload)
    ]);

    return result[0].toAddress();
  }

  try_newAppProxyPinned(
    _kernel: Address,
    _appId: Bytes,
    _initializePayload: Bytes
  ): CallResult<Address> {
    let result = super.tryCall("newAppProxyPinned", [
      EthereumValue.fromAddress(_kernel),
      EthereumValue.fromFixedBytes(_appId),
      EthereumValue.fromBytes(_initializePayload)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  kernel(): Address {
    let result = super.call("kernel", []);

    return result[0].toAddress();
  }

  try_kernel(): CallResult<Address> {
    let result = super.tryCall("kernel", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): CallResult<boolean> {
    let result = super.tryCall("isPetrified", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  newAppProxy(_kernel: Address, _appId: Bytes): Address {
    let result = super.call("newAppProxy", [
      EthereumValue.fromAddress(_kernel),
      EthereumValue.fromFixedBytes(_appId)
    ]);

    return result[0].toAddress();
  }

  try_newAppProxy(_kernel: Address, _appId: Bytes): CallResult<Address> {
    let result = super.tryCall("newAppProxy", [
      EthereumValue.fromAddress(_kernel),
      EthereumValue.fromFixedBytes(_appId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  newAppProxy1(
    _kernel: Address,
    _appId: Bytes,
    _initializePayload: Bytes
  ): Address {
    let result = super.call("newAppProxy", [
      EthereumValue.fromAddress(_kernel),
      EthereumValue.fromFixedBytes(_appId),
      EthereumValue.fromBytes(_initializePayload)
    ]);

    return result[0].toAddress();
  }

  try_newAppProxy1(
    _kernel: Address,
    _appId: Bytes,
    _initializePayload: Bytes
  ): CallResult<Address> {
    let result = super.tryCall("newAppProxy", [
      EthereumValue.fromAddress(_kernel),
      EthereumValue.fromFixedBytes(_appId),
      EthereumValue.fromBytes(_initializePayload)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  newAppProxyPinned1(_kernel: Address, _appId: Bytes): Address {
    let result = super.call("newAppProxyPinned", [
      EthereumValue.fromAddress(_kernel),
      EthereumValue.fromFixedBytes(_appId)
    ]);

    return result[0].toAddress();
  }

  try_newAppProxyPinned1(_kernel: Address, _appId: Bytes): CallResult<Address> {
    let result = super.tryCall("newAppProxyPinned", [
      EthereumValue.fromAddress(_kernel),
      EthereumValue.fromFixedBytes(_appId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  newRepo(_name: string, _dev: Address): Address {
    let result = super.call("newRepo", [
      EthereumValue.fromString(_name),
      EthereumValue.fromAddress(_dev)
    ]);

    return result[0].toAddress();
  }

  try_newRepo(_name: string, _dev: Address): CallResult<Address> {
    let result = super.tryCall("newRepo", [
      EthereumValue.fromString(_name),
      EthereumValue.fromAddress(_dev)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  newRepoWithVersion(
    _name: string,
    _dev: Address,
    _initialSemanticVersion: Array<i32>,
    _contractAddress: Address,
    _contentURI: Bytes
  ): Address {
    let result = super.call("newRepoWithVersion", [
      EthereumValue.fromString(_name),
      EthereumValue.fromAddress(_dev),
      EthereumValue.fromI32Array(_initialSemanticVersion),
      EthereumValue.fromAddress(_contractAddress),
      EthereumValue.fromBytes(_contentURI)
    ]);

    return result[0].toAddress();
  }

  try_newRepoWithVersion(
    _name: string,
    _dev: Address,
    _initialSemanticVersion: Array<i32>,
    _contractAddress: Address,
    _contentURI: Bytes
  ): CallResult<Address> {
    let result = super.tryCall("newRepoWithVersion", [
      EthereumValue.fromString(_name),
      EthereumValue.fromAddress(_dev),
      EthereumValue.fromI32Array(_initialSemanticVersion),
      EthereumValue.fromAddress(_contractAddress),
      EthereumValue.fromBytes(_contentURI)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class TransferToVaultCall extends EthereumCall {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class NewAppProxyPinnedCall extends EthereumCall {
  get inputs(): NewAppProxyPinnedCall__Inputs {
    return new NewAppProxyPinnedCall__Inputs(this);
  }

  get outputs(): NewAppProxyPinnedCall__Outputs {
    return new NewAppProxyPinnedCall__Outputs(this);
  }
}

export class NewAppProxyPinnedCall__Inputs {
  _call: NewAppProxyPinnedCall;

  constructor(call: NewAppProxyPinnedCall) {
    this._call = call;
  }

  get _kernel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _appId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _initializePayload(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class NewAppProxyPinnedCall__Outputs {
  _call: NewAppProxyPinnedCall;

  constructor(call: NewAppProxyPinnedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewAppProxyCall extends EthereumCall {
  get inputs(): NewAppProxyCall__Inputs {
    return new NewAppProxyCall__Inputs(this);
  }

  get outputs(): NewAppProxyCall__Outputs {
    return new NewAppProxyCall__Outputs(this);
  }
}

export class NewAppProxyCall__Inputs {
  _call: NewAppProxyCall;

  constructor(call: NewAppProxyCall) {
    this._call = call;
  }

  get _kernel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _appId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class NewAppProxyCall__Outputs {
  _call: NewAppProxyCall;

  constructor(call: NewAppProxyCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewAppProxy1Call extends EthereumCall {
  get inputs(): NewAppProxy1Call__Inputs {
    return new NewAppProxy1Call__Inputs(this);
  }

  get outputs(): NewAppProxy1Call__Outputs {
    return new NewAppProxy1Call__Outputs(this);
  }
}

export class NewAppProxy1Call__Inputs {
  _call: NewAppProxy1Call;

  constructor(call: NewAppProxy1Call) {
    this._call = call;
  }

  get _kernel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _appId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _initializePayload(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class NewAppProxy1Call__Outputs {
  _call: NewAppProxy1Call;

  constructor(call: NewAppProxy1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewAppProxyPinned1Call extends EthereumCall {
  get inputs(): NewAppProxyPinned1Call__Inputs {
    return new NewAppProxyPinned1Call__Inputs(this);
  }

  get outputs(): NewAppProxyPinned1Call__Outputs {
    return new NewAppProxyPinned1Call__Outputs(this);
  }
}

export class NewAppProxyPinned1Call__Inputs {
  _call: NewAppProxyPinned1Call;

  constructor(call: NewAppProxyPinned1Call) {
    this._call = call;
  }

  get _kernel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _appId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class NewAppProxyPinned1Call__Outputs {
  _call: NewAppProxyPinned1Call;

  constructor(call: NewAppProxyPinned1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registrar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class NewRepoCall extends EthereumCall {
  get inputs(): NewRepoCall__Inputs {
    return new NewRepoCall__Inputs(this);
  }

  get outputs(): NewRepoCall__Outputs {
    return new NewRepoCall__Outputs(this);
  }
}

export class NewRepoCall__Inputs {
  _call: NewRepoCall;

  constructor(call: NewRepoCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _dev(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class NewRepoCall__Outputs {
  _call: NewRepoCall;

  constructor(call: NewRepoCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewRepoWithVersionCall extends EthereumCall {
  get inputs(): NewRepoWithVersionCall__Inputs {
    return new NewRepoWithVersionCall__Inputs(this);
  }

  get outputs(): NewRepoWithVersionCall__Outputs {
    return new NewRepoWithVersionCall__Outputs(this);
  }
}

export class NewRepoWithVersionCall__Inputs {
  _call: NewRepoWithVersionCall;

  constructor(call: NewRepoWithVersionCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _dev(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _initialSemanticVersion(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get _contractAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _contentURI(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class NewRepoWithVersionCall__Outputs {
  _call: NewRepoWithVersionCall;

  constructor(call: NewRepoWithVersionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
