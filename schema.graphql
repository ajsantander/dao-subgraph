type Registry @entity {
  id: ID!
  repoCount: Int!
  repos: [Repo!]
}

type Repo @entity {
  id: ID!                             # Repo ENS node
  address: Bytes!                     # Repo address
  name: String!                       # Repo name
  node: Bytes!                        # Repo ENS node
  lastVersion: Version                # Latests version
  versions: [Version!] @derivedFrom(field: "repo")
  apps: [App!] @derivedFrom(field: "repo")
}

type Version @entity {
  id: ID!                             # ID concat versionId and semanticVersion
  semanticVersion: String!            # Semantic version
  contractAddress: Bytes!             # Smart contract address
  content: String!                    # Content URI
  repo: Repo!                         # Repo entity
}

type Factory @entity {
  id: ID!
  orgCount: Int!
  organizations: [Organization!]
}

type Organization @entity {
  id: ID!                             # Kernel proxy address
  address: Bytes!                     # Kernel address
  acl: Acl                            # Acl entity
  recoveryVault: Bytes!               # Address of the recovery Vault instance
  apps: [App!]                        # List of apps
  factory: Factory! @derivedFrom(field: "organizations")
}

type Acl @entity {
  id: ID!                             # Acl proxy address
  address: Bytes!                     # Acl address
  permissions: [Permission!]          # Permission object
  organization: Organization! @derivedFrom(field: "acl")
}

type Permission @entity {
  id: ID!                             # ID concat of app, role and entity
  app: App!                           # App entity
  role: Role!                         # Role entity
  entity: Bytes!                      # Address assigned the permissions
  allowed: Boolean                    # Entity has permissions
  # TODO: Add parms
}

type App @entity {
  id: ID!                             # App proxy address
  address: Bytes!                     # App address
  appId: String!                      # ENS namehash of the aragonPM repo
  isForwarder: Boolean!               # Whether the app is Forwarder
  isUpgradeable: Boolean!             # Whether the app is upgradeable
  implementation: Bytes               # Address of the app instance or base
  repo: Repo                          # Repo entity
  artifact: String                    # Artifact.json metadata
  manifest: String                    # Manifest.json metadata
  organization: Organization! @derivedFrom(field: "apps")
  roles: [Role!] @derivedFrom(field: "app")
}

type Role @entity {
  id: ID!                             # ID concat of app and role hash
  app: App!                           # App entity
  name: String!                       # Role name
  manager: Bytes!                     # Manager address
  allowedEntities: [Permission!] @derivedFrom(field: "role")
}
